--========================================================
-- BRVS: Rayfield-powered Tools (Auto Buy, Auto Collect, Inventory, Utils)
--========================================================

--// Services (prefixed)
local BRVS_Players = game:GetService("Players")
local BRVS_ReplicatedStorage = game:GetService("ReplicatedStorage")
local BRVS_Lighting = game:GetService("Lighting")
local BRVS_Workspace = game:GetService("Workspace")

local BRVS_Player = BRVS_Players.LocalPlayer
local BRVS_UserId = BRVS_Player.UserId

--// Fixed lists (prefixed)
local BRVS_EGG_NAMES = {
	"BasicEgg","RareEgg","SuperRareEgg","SeaweedEgg","EpicEgg","LegendEgg",
	"ClownfishEgg","SnowbunnyEgg","PrismaticEgg","LionfishEgg","HyperEgg",
	"DarkGoatyEgg","VoidEgg","BowserEgg","SharkEgg","DemonEgg","RhinoRockEgg",
	"CornEgg","AnglerfishEgg","BoneDragonEgg","UltraEgg","DinoEgg","FlyEgg",
	"SaberCubEgg","UnicornEgg","OctopusEgg","AncientEgg","SeaDragonEgg",
	"UnicornProEgg","GeneralKongEgg","PegasusEgg",
}
local BRVS_MUTATIONS = { "None","Golden","Diamond","Electirc","Fire","Dino","Snow" }

-- Rayfield display lists with explicit "Any"
local BRVS_EGG_OPTIONS = (function() local t={"Any"} for _,v in ipairs(BRVS_EGG_NAMES) do table.insert(t,v) end return t end)()
local BRVS_MUTATION_OPTIONS = (function() local t={"Any"} for _,v in ipairs(BRVS_MUTATIONS) do table.insert(t,v) end return t end)()

-- Food options (multi-select)
local BRVS_FOOD_OPTIONS = {
	"Strawberry","Blueberry","Watermelon","Apple","Orange","Corn","Banana","Grape",
	"Pear","Pineapple","DragonFruit","GoldMango","BloodstoneCycad","ColossalPinecone",
	"VoltGinkgo","DeepseaPearlFruit","Durian",
}

--// World paths
local BRVS_ART_FOLDER = workspace:WaitForChild("Art")
local BRVS_EGGS_FOLDER = BRVS_ReplicatedStorage:WaitForChild("Eggs")

--// Remotes/config
local BRVS_BUYEGG_REMOTE_PATH = { "Remote", "CharacterRE" } -- ReplicatedStorage.Remote.CharacterRE
local BRVS_BUYEGG_ACTION = "BuyEgg"
local BRVS_AUTO_BUY_COOLDOWN = 2 -- seconds per-egg debounce

local BRVS_FOOD_REMOTE_PATH = { "Remote", "FoodStoreRE" } -- ReplicatedStorage.Remote.FoodStoreRE

--========================================================
-- Utils (prefixed)
local function BRVS_GetMyIslandName()
	for i = 1, 6 do
		local island = BRVS_ART_FOLDER:FindFirstChild("Island_" .. i)
		if island and island:GetAttribute("OccupyingPlayerId") == BRVS_UserId then
			return island.Name
		end
	end
	return nil
end

local function BRVS_ContainsOrAny(list, value)
	if not list or #list == 0 then return true end
	for _, v in ipairs(list) do
		if v == "Any" then return true end
		if v == value then return true end
	end
	return false
end

-- NEW: safe remote getter (non-blocking)
local function BRVS_GetRemote(pathArray)
	local node = BRVS_ReplicatedStorage
	for _, name in ipairs(pathArray) do
		node = node and node:FindFirstChild(name)
		if not node then return nil end
	end
	return node
end

--========================================================
-- State (prefixed)
local BRVS_IslandName = BRVS_GetMyIslandName()
local BRVS_IslandFolder = BRVS_IslandName and (BRVS_EGGS_FOLDER:FindFirstChild(BRVS_IslandName) or BRVS_EGGS_FOLDER:WaitForChild(BRVS_IslandName, 10)) or nil
local BRVS_Conns, BRVS_PerEggConns = {}, {}
local function BRVS_ClearConns(t) for _, c in ipairs(t) do pcall(function() c:Disconnect() end) end table.clear(t) end
local function BRVS_ClearPerEggConns() for _, b in pairs(BRVS_PerEggConns) do for _, c in ipairs(b) do pcall(function() c:Disconnect() end) end end BRVS_PerEggConns = {} end

-- User selections (from Rayfield)
local BRVS_SelEggNames = {}   -- {} or includes "Any"
local BRVS_SelMutations = {}  -- {} or includes "Any" / "None"

-- Toggles / misc
local BRVS_AutoBuyEnabled = false
local BRVS_LastFireAt = {} -- [Instance]=time

-- Food auto-buy state
local BRVS_SelectedFood = {} -- multi-select strings
local BRVS_FoodBuyEnabled = false
local BRVS_FoodBuyInterval = 0.2 -- fixed delay (seconds)
local BRVS_FoodBuyThread

-- Anti AFK (jump)
local BRVS_AntiAfkEnabled = false
local BRVS_AntiAfkConn
local BRVS_AntiAfkThread

-- Ultra Low (merged No Lag + Low Graphics)
local BRVS_SavedStates = {}  -- [Instance] = original Enabled (emitters/lights)
local BRVS_Terrain = workspace:FindFirstChildOfClass("Terrain")

-- Auto Collect (new tab)
local BRVS_PetCollectEnabled = false
local BRVS_PetCollectInterval = 3
local BRVS_PetCollectThread

local BRVS_BigPetCollectEnabled = false
local BRVS_BigPetCollectInterval = 5
local BRVS_BigPetCollectThread

--========================================================
-- Anti-AFK (jump) helpers (prefixed)
local function BRVS_GetHumanoid()
	local char = BRVS_Players.LocalPlayer.Character or BRVS_Players.LocalPlayer.CharacterAdded:Wait()
	return char:FindFirstChildOfClass("Humanoid")
end

local function BRVS_PerformJump(times)
	times = times or 1
	local hum = BRVS_GetHumanoid()
	if not hum then return end
	for _ = 1, times do
		hum.Jump = true
		hum:ChangeState(Enum.HumanoidStateType.Jumping)
		task.wait(0.2)
	end
end

--========================================================
-- Ultra Low helpers/state (from Low Graphics) (prefixed)
local BRVS_LG_CONFIG = {
	DisableTextures             = true,
	HideSurfaceAppearance       = false,
	DisableNonPlayerAnimations  = true,
}

local function BRVS_g(inst, prop) local ok,v=pcall(function() return inst[prop] end); return ok and v or nil end
local function BRVS_s(inst, prop, val) pcall(function() inst[prop]=val end) end

local BRVS_lightingProps = {
	"GlobalShadows","EnvironmentSpecularScale","EnvironmentDiffuseScale","Brightness",
	"Ambient","OutdoorAmbient","FogStart","FogEnd","FogColor","ClockTime","ShadowSoftness","Technology"
}
local BRVS_terrainProps  = {
	"Decoration","WaterWaveSize","WaterWaveSpeed","WaterReflectance","WaterTransparency","WaterColor"
}

local BRVS_LG_original = {
	lighting = {}, terrain = {}, postFX = {}, atmo = nil,
	decals = {}, textures = {}, surfaceA = {}
}
for _,p in ipairs(BRVS_lightingProps) do BRVS_LG_original.lighting[p]=BRVS_g(BRVS_Lighting,p) end
for _,fx in ipairs(BRVS_Lighting:GetDescendants()) do
	if fx:IsA("PostEffect") then BRVS_LG_original.postFX[fx]=fx.Enabled end
end
do
	local A = BRVS_Lighting:FindFirstChildOfClass("Atmosphere")
	if A then
		BRVS_LG_original.atmo = { obj=A, props={
			Density=BRVS_g(A,"Density"), Offset=BRVS_g(A,"Offset"), Color=BRVS_g(A,"Color"),
			Decay=BRVS_g(A,"Decay"), Glare=BRVS_g(A,"Glare"), Haze=BRVS_g(A,"Haze"),
			MieScatteringScale=BRVS_g(A,"MieScatteringScale"),
		}}
	end
end
if BRVS_Terrain then for _,p in ipairs(BRVS_terrainProps) do BRVS_LG_original.terrain[p]=BRVS_g(BRVS_Terrain,p) end end

local function BRVS_LG_snapshotVisuals()
	if BRVS_LG_CONFIG.DisableTextures then
		for _,obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("Decal") then if BRVS_LG_original.decals[obj]==nil then BRVS_LG_original.decals[obj]=BRVS_g(obj,"Transparency") end
			elseif obj:IsA("Texture") then if BRVS_LG_original.textures[obj]==nil then BRVS_LG_original.textures[obj]=BRVS_g(obj,"Transparency") end
			end
		end
	end
	if BRVS_LG_CONFIG.HideSurfaceAppearance then
		for _,obj in ipairs(workspace:GetDescendants()) do
			if obj:IsA("SurfaceAppearance") and BRVS_LG_original.surfaceA[obj]==nil then
				BRVS_LG_original.surfaceA[obj] = {
					ColorMap=BRVS_g(obj,"ColorMap"), MetalnessMap=BRVS_g(obj,"MetalnessMap"),
					NormalMap=BRVS_g(obj,"NormalMap"), RoughnessMap=BRVS_g(obj,"RoughnessMap")
				}
			end
		end
	end
end
BRVS_LG_snapshotVisuals()

-- Non-player animation blocker
local BRVS_LG_animBlockConns, BRVS_LG_animAddedConn = {}, nil
local function BRVS_LG_isLocalCharacterHumanoid(h) local c=BRVS_Players.LocalPlayer.Character return c and h and h:IsDescendantOf(c) end
local function BRVS_LG_stopAnimator(anim)
	for _,t in ipairs(anim:GetPlayingAnimationTracks()) do pcall(function() t:Stop(0) end) end
	if not BRVS_LG_animBlockConns[anim] then
		BRVS_LG_animBlockConns[anim]=anim.AnimationPlayed:Connect(function(track) pcall(function() track:Stop(0) end) end)
	end
end
local function BRVS_LG_applyAnimationBlock()
	for _,o in ipairs(workspace:GetDescendants()) do
		if o:IsA("Humanoid") then
			if not BRVS_LG_isLocalCharacterHumanoid(o) then local a=o:FindFirstChildOfClass("Animator"); if a then BRVS_LG_stopAnimator(a) end end
		elseif o:IsA("AnimationController") then local a=o:FindFirstChildOfClass("Animator"); if a then BRVS_LG_stopAnimator(a) end end
	end
	if not BRVS_LG_animAddedConn then
		BRVS_LG_animAddedConn = workspace.DescendantAdded:Connect(function(o)
			if o:IsA("Animator") and BRVS_LG_CONFIG.DisableNonPlayerAnimations then
				local h = o.Parent and o.Parent:FindFirstChildOfClass("Humanoid")
				if h and BRVS_LG_isLocalCharacterHumanoid(h) then return end
				BRVS_LG_stopAnimator(o)
			end
		end)
	end
end
local function BRVS_LG_clearAnimationBlock()
	for a,c in pairs(BRVS_LG_animBlockConns) do if c then c:Disconnect() end BRVS_LG_animBlockConns[a]=nil end
	if BRVS_LG_animAddedConn then BRVS_LG_animAddedConn:Disconnect(); BRVS_LG_animAddedConn=nil end
end

local BRVS_LG_active = false
local function BRVS_ApplyLowGraphics()
	BRVS_s(BRVS_Lighting,"GlobalShadows",false)
	BRVS_s(BRVS_Lighting,"EnvironmentSpecularScale",0)
	BRVS_s(BRVS_Lighting,"EnvironmentDiffuseScale",0)
	BRVS_s(BRVS_Lighting,"ShadowSoftness",0)
	for fx in pairs(BRVS_LG_original.postFX) do if fx and fx.Parent then BRVS_s(fx,"Enabled",false) end end
	if BRVS_LG_original.atmo and BRVS_LG_original.atmo.obj then local A=BRVS_LG_original.atmo.obj
		BRVS_s(A,"Density",0); BRVS_s(A,"Glare",0); BRVS_s(A,"Haze",0); BRVS_s(A,"MieScatteringScale",0) end
	if BRVS_Terrain then
        BRVS_s(BRVS_Terrain, "Decoration", false)
        BRVS_s(BRVS_Terrain, "WaterWaveSize", 0)
        BRVS_s(BRVS_Terrain, "WaterWaveSpeed", 0)
        BRVS_s(BRVS_Terrain, "WaterReflectance", 0)
        BRVS_s(BRVS_Terrain, "WaterTransparency", 0)
        BRVS_s(BRVS_Terrain, "WaterColor", Color3.fromRGB(85, 170, 255))
	end
	if BRVS_LG_CONFIG.DisableTextures then
		for o in pairs(BRVS_LG_original.decals)   do if o and o.Parent then BRVS_s(o,"Transparency",1) end end
		for o in pairs(BRVS_LG_original.textures) do if o and o.Parent then BRVS_s(o,"Transparency",1) end end
	end
	if BRVS_LG_CONFIG.HideSurfaceAppearance then
		for o in pairs(BRVS_LG_original.surfaceA) do if o and o.Parent then
			BRVS_s(o,"ColorMap",""); BRVS_s(o,"MetalnessMap",""); BRVS_s(o,"NormalMap",""); BRVS_s(o,"RoughnessMap","") end end
	end
	if BRVS_LG_CONFIG.DisableNonPlayerAnimations then BRVS_LG_applyAnimationBlock() end
	BRVS_LG_active = true
end
local function BRVS_RestoreLowGraphics()
	for p,v in pairs(BRVS_LG_original.lighting) do BRVS_s(BRVS_Lighting,p,v) end
	for fx,was in pairs(BRVS_LG_original.postFX) do if fx and fx.Parent then BRVS_s(fx,"Enabled",was) end end
	if BRVS_LG_original.atmo and BRVS_LG_original.atmo.obj and BRVS_LG_original.atmo.props then
		for p,v in pairs(BRVS_LG_original.atmo.props) do BRVS_s(BRVS_LG_original.atmo.obj,p,v) end
	end
	if BRVS_Terrain then for p,v in pairs(BRVS_LG_original.terrain) do BRVS_s(BRVS_Terrain,p,v) end end
	if BRVS_LG_CONFIG.DisableTextures then
		for o,prev in pairs(BRVS_LG_original.decals)   do if o and o.Parent then BRVS_s(o,"Transparency",prev) end end
		for o,prev in pairs(BRVS_LG_original.textures) do if o and o.Parent then BRVS_s(o,"Transparency",prev) end end
	end
	if BRVS_LG_CONFIG.HideSurfaceAppearance then
		for o,props in pairs(BRVS_LG_original.surfaceA) do if o and o.Parent then for k,v in pairs(props) do BRVS_s(o,k,v) end end end
	end
	BRVS_LG_clearAnimationBlock()
	BRVS_LG_active = false
end

local function BRVS_ApplyUltraLow()
	for _, inst in ipairs(workspace:GetDescendants()) do
		if inst:IsA("ParticleEmitter") or inst:IsA("Trail") or inst:IsA("Beam") or inst:IsA("Highlight")
		or inst:IsA("PointLight") or inst:IsA("SpotLight") or inst:IsA("SurfaceLight") then
			if BRVS_SavedStates[inst] == nil then BRVS_SavedStates[inst] = inst.Enabled end
			inst.Enabled = false
		end
	end
	BRVS_Lighting.GlobalShadows = false
	BRVS_ApplyLowGraphics()
end

local function BRVS_RestoreUltraLow()
	for inst, was in pairs(BRVS_SavedStates) do
		if inst and inst.Parent then
			if inst:IsA("ParticleEmitter") or inst:IsA("Trail") or inst:IsA("Beam") or inst:IsA("Highlight")
			or inst:IsA("PointLight") or inst:IsA("SpotLight") or inst:IsA("SurfaceLight") then
				inst.Enabled = (was == true)
			end
		end
	end
	table.clear(BRVS_SavedStates)
	BRVS_Lighting.GlobalShadows = true
	BRVS_RestoreLowGraphics()
end

--========================================================
-- Core logic (eggs) (prefixed)
local function BRVS_CurrentSelectionsMatch(egg)
	local nameVal = egg:GetAttribute("T") or "(no value)"
	local rawM    = egg:GetAttribute("M")  -- may be nil or ""
	local mutVal  = rawM or "(no value)"

	local nameOk = BRVS_ContainsOrAny(BRVS_SelEggNames, nameVal)

	local mutOk
	if not BRVS_SelMutations or #BRVS_SelMutations == 0 then
		mutOk = true
	else
		mutOk = false
		for _, opt in ipairs(BRVS_SelMutations) do
			if opt == "Any" then mutOk = true break end
			if opt == mutVal then mutOk = true break end
			if opt == "None" and (rawM == nil or rawM == "") then mutOk = true break end
		end
	end

	return nameOk and mutOk
end

local function BRVS_AttemptAutoBuy(egg)
	if not BRVS_AutoBuyEnabled then return end
	if not egg or not egg.Parent or egg.Parent ~= BRVS_IslandFolder then return end
	if not BRVS_CurrentSelectionsMatch(egg) then return end

	local now = os.clock()
	if BRVS_LastFireAt[egg] and (now - BRVS_LastFireAt[egg] < BRVS_AUTO_BUY_COOLDOWN) then return end
	BRVS_LastFireAt[egg] = now

	local args = { BRVS_BUYEGG_ACTION, egg.Name } -- "BuyEgg", "<uid>"
	local remote = BRVS_ReplicatedStorage:WaitForChild(BRVS_BUYEGG_REMOTE_PATH[1]):WaitForChild(BRVS_BUYEGG_REMOTE_PATH[2])
	if remote and remote:IsA("RemoteEvent") then
		remote:FireServer(table.unpack(args))
	else
		warn("BRVS AutoBuy: RemoteEvent missing at ReplicatedStorage." .. table.concat(BRVS_BUYEGG_REMOTE_PATH, "."))
	end
end

local function BRVS_PrintMatches()
	if not BRVS_IslandFolder then return end
	-- print("=== BRVS Matching Eggs ===")
	for _, e in ipairs(BRVS_IslandFolder:GetChildren()) do
		local tVal = e:GetAttribute("T") or "(no value)"
		local mVal = e:GetAttribute("M") or "(no value)"
		if BRVS_CurrentSelectionsMatch(e) then
			-- print(string.format(" - %s | Name: %s | Mutation: %s", e.Name, tVal, mVal))
		end
	end
end

local function BRVS_RescanAutoBuy()
	if not (BRVS_AutoBuyEnabled and BRVS_IslandFolder) then return end
	for _, egg in ipairs(BRVS_IslandFolder:GetChildren()) do
		BRVS_AttemptAutoBuy(egg)
		task.wait()
	end
end

local function BRVS_BindIsland(newName)
	BRVS_ClearConns(BRVS_Conns); BRVS_ClearPerEggConns()
	BRVS_IslandName = newName
	BRVS_IslandFolder = BRVS_IslandName and (BRVS_EGGS_FOLDER:FindFirstChild(BRVS_IslandName) or BRVS_EGGS_FOLDER:WaitForChild(BRVS_IslandName, 10)) or nil
	if not BRVS_IslandFolder then return end

	for _, egg in ipairs(BRVS_IslandFolder:GetChildren()) do
		local c1 = egg:GetAttributeChangedSignal("T"):Connect(function() BRVS_PrintMatches(); BRVS_AttemptAutoBuy(egg) end)
		local c2 = egg:GetAttributeChangedSignal("M"):Connect(function() BRVS_PrintMatches(); BRVS_AttemptAutoBuy(egg) end)
		BRVS_PerEggConns[egg] = { c1, c2 }
		BRVS_AttemptAutoBuy(egg)
	end

	table.insert(BRVS_Conns, BRVS_IslandFolder.ChildAdded:Connect(function(child)
		local c1 = child:GetAttributeChangedSignal("T"):Connect(function() BRVS_PrintMatches(); BRVS_AttemptAutoBuy(child) end)
		local c2 = child:GetAttributeChangedSignal("M"):Connect(function() BRVS_PrintMatches(); BRVS_AttemptAutoBuy(child) end)
		BRVS_PerEggConns[child] = { c1, c2 }
		BRVS_PrintMatches(); BRVS_AttemptAutoBuy(child)
	end))

	table.insert(BRVS_Conns, BRVS_IslandFolder.ChildRemoved:Connect(function(child)
		local b = BRVS_PerEggConns[child]
		if b then for _, c in ipairs(b) do pcall(function() c:Disconnect() end) end end
		BRVS_PerEggConns[child] = nil
		BRVS_PrintMatches()
	end))
end

--========================================================
-- LIVE FOOD STOCK (PlayerGui.Data.FoodStore.LST)
local BRVS_FoodStock      = {}   -- { [FoodName] = number }
local BRVS_FoodStockConns = {}
local BRVS_LST = nil

local function BRVS_DisconnectStock()
	for _, c in ipairs(BRVS_FoodStockConns) do pcall(function() c:Disconnect() end) end
	table.clear(BRVS_FoodStockConns)
end

local function BRVS_SnapshotAttrs(lst)
	table.clear(BRVS_FoodStock)
	for k, v in pairs(lst:GetAttributes()) do
		BRVS_FoodStock[k] = tonumber(v) or 0
	end
	for _, child in ipairs(lst:GetChildren()) do
		if child:IsA("IntValue") or child:IsA("NumberValue") then
			BRVS_FoodStock[child.Name] = tonumber(child.Value) or 0
		end
	end
end

function BRVS_BindFoodStock()
	BRVS_DisconnectStock()

	local pg = BRVS_Player:WaitForChild("PlayerGui")
	local data = pg:WaitForChild("Data")
	local fs = data:WaitForChild("FoodStore")
	local lst = fs:WaitForChild("LST")
	BRVS_LST = lst

	BRVS_SnapshotAttrs(lst)

	table.insert(BRVS_FoodStockConns, lst.AttributeChanged:Connect(function(attr)
		local val = lst:GetAttribute(attr)
		BRVS_FoodStock[attr] = tonumber(val) or 0
	end))

	for _, child in ipairs(lst:GetChildren()) do
		if child:IsA("IntValue") or child:IsA("NumberValue") then
			table.insert(BRVS_FoodStockConns, child:GetPropertyChangedSignal("Value"):Connect(function()
				BRVS_FoodStock[child.Name] = tonumber(child.Value) or 0
			end))
		end
	end

	table.insert(BRVS_FoodStockConns, lst.ChildAdded:Connect(function(child)
		if child:IsA("IntValue") or child:IsA("NumberValue") then
			BRVS_FoodStock[child.Name] = tonumber(child.Value) or 0
			table.insert(BRVS_FoodStockConns, child:GetPropertyChangedSignal("Value"):Connect(function()
				BRVS_FoodStock[child.Name] = tonumber(child.Value) or 0
			end))
		end
	end))

	return BRVS_LST
end

local function BRVS_HasFoodStock(name) return (BRVS_FoodStock[name] or 0) > 0 end

--========================================================
-- INVENTORY: Eggs (PlayerGui.Data.Egg)
local BRVS_InvEggConns = {}
local BRVS_InvEggPerItemConns = {}
local BRVS_InvEggLabel -- set after creating tab

local function BRVS_ClearInvEggConns()
	for _,c in ipairs(BRVS_InvEggConns) do pcall(function() c:Disconnect() end) end
	table.clear(BRVS_InvEggConns)
	for inst, list in pairs(BRVS_InvEggPerItemConns) do
		for _,c in ipairs(list) do pcall(function() c:Disconnect() end) end
		BRVS_InvEggPerItemConns[inst] = nil
	end
end

local function BRVS_HumanEggName(tVal)
	local base = tostring(tVal or "Unknown")
	base = base:gsub("Egg$", "")
	base = (base:sub(1,1):upper() .. base:sub(2):lower())
	return base .. " egg"
end

local function BRVS_RebuildEggInventoryText(eggsFolder)
	if not BRVS_InvEggLabel then return end
	if not eggsFolder then
		BRVS_InvEggLabel:Set("Egg:\n- (none)")
		return
	end

	local counts = {}   -- key = T .. "\0" .. (M or "")
	for _, egg in ipairs(eggsFolder:GetChildren()) do
		local T = egg:GetAttribute("T")
		local M = egg:GetAttribute("M")
		local key = tostring(T or "Unknown") .. "\0" .. tostring(M or "")
		counts[key] = (counts[key] or 0) + 1
	end

	local lines = {}
	for key, n in pairs(counts) do
		local T, M = key:match("^(.-)\0(.*)$")
		local name = BRVS_HumanEggName(T)
		local line = (M and M ~= "") and string.format("- %s | %s (%d)", name, M, n) or string.format("- %s (%d)", name, n)
		table.insert(lines, line)
	end
	table.sort(lines, function(a,b) return a:lower()<b:lower() end)

	local text = "Egg:"
	if #lines == 0 then
		text = text .. "\n- (none)"
	else
		for _,ln in ipairs(lines) do text = text .. "\n" .. ln end
	end
	BRVS_InvEggLabel:Set(text)
end

local function BRVS_BindInventoryEggs()
	BRVS_ClearInvEggConns()

	local pg = BRVS_Player:WaitForChild("PlayerGui")
	local data = pg:WaitForChild("Data")
	local eggs = data:WaitForChild("Egg")  -- array of uid nodes with attributes T and optional M

	BRVS_RebuildEggInventoryText(eggs)

	table.insert(BRVS_InvEggConns, eggs.ChildAdded:Connect(function(child)
		local list = {}
		table.insert(list, child:GetAttributeChangedSignal("T"):Connect(function() BRVS_RebuildEggInventoryText(eggs) end))
		table.insert(list, child:GetAttributeChangedSignal("M"):Connect(function() BRVS_RebuildEggInventoryText(eggs) end))
		BRVS_InvEggPerItemConns[child] = list
		BRVS_RebuildEggInventoryText(eggs)
	end))
	table.insert(BRVS_InvEggConns, eggs.ChildRemoved:Connect(function(child)
		local list = BRVS_InvEggPerItemConns[child]
		if list then for _,c in ipairs(list) do pcall(function() c:Disconnect() end) end end
		BRVS_InvEggPerItemConns[child] = nil
		BRVS_RebuildEggInventoryText(eggs)
	end))

	for _, child in ipairs(eggs:GetChildren()) do
		local list = {}
		table.insert(list, child:GetAttributeChangedSignal("T"):Connect(function() BRVS_RebuildEggInventoryText(eggs) end))
		table.insert(list, child:GetAttributeChangedSignal("M"):Connect(function() BRVS_RebuildEggInventoryText(eggs) end))
		BRVS_InvEggPerItemConns[child] = list
	end
end

--========================================================
-- Rayfield UI (prefixed locals)
local BRVS_Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local BRVS_Window = BRVS_Rayfield:CreateWindow({
	Name = "Build A Zoo (SNOW) | @braxsveid",
	Icon = "egg",
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "by Sirius",
	ShowText = "Rayfield",
	Theme = "Default",
	ToggleUIKeybind = "K",
	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false,
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "EggTools",
		FileName = "EggTools_Config"
	},
	Discord = { Enabled = false },
	KeySystem = false,
})

-- =================== TAB: Auto Buy ===================
local BRVS_AutoTab = BRVS_Window:CreateTab("Auto Buy", "shopping-bag")
local BRVS_IslandLabel = BRVS_AutoTab:CreateLabel(BRVS_IslandName and ("Island: "..BRVS_IslandName) or "Island: (none)")

BRVS_AutoTab:CreateSection("Filters")
local BRVS_EggDD = BRVS_AutoTab:CreateDropdown({
	Name = "Name(s)",
	Options = BRVS_EGG_OPTIONS,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "EggNames",
	Callback = function(options)
		BRVS_SelEggNames = options or {}
		BRVS_PrintMatches()
		BRVS_RescanAutoBuy()
	end,
})
local BRVS_MutDD = BRVS_AutoTab:CreateDropdown({
	Name = "Mutation(s)",
	Options = BRVS_MUTATION_OPTIONS,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "Mutations",
	Callback = function(options)
		BRVS_SelMutations = options or {}
		BRVS_PrintMatches()
		BRVS_RescanAutoBuy()
	end,
})

BRVS_AutoTab:CreateSection("Automation")
local BRVS_AutoBuyToggle = BRVS_AutoTab:CreateToggle({
	Name = "Auto Buy Eggs",
	CurrentValue = false,
	Flag = "AutoBuy",
	Callback = function(on)
		BRVS_AutoBuyEnabled = on
		if BRVS_AutoBuyEnabled then
			BRVS_RescanAutoBuy()
			BRVS_Rayfield:Notify({ Title = "Auto Buy", Content = "Enabled", Duration = 4, Image = "shopping-bag" })
		else
			BRVS_Rayfield:Notify({ Title = "Auto Buy", Content = "Disabled", Duration = 3, Image = "ban" })
		end
	end,
})

BRVS_AutoTab:CreateSection("Food Store")
-- Food multi-select
local BRVS_FoodDD = BRVS_AutoTab:CreateDropdown({
	Name = "Food (multi-select)",
	Options = BRVS_FOOD_OPTIONS,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "FoodSelect",
	Callback = function(options)
		BRVS_SelectedFood = options or {}
	end,
})

-- Auto Buy Food toggle (uses LIVE STOCK, fixed 0.2s tick)
local BRVS_AutoBuyFoodToggle = BRVS_AutoTab:CreateToggle({
	Name = "Auto Buy Food",
	CurrentValue = false,
	Flag = "AutoBuyFood",
	Callback = function(on)
		BRVS_FoodBuyEnabled = on
		BRVS_FoodBuyThread = nil
		if not BRVS_FoodBuyEnabled then
			BRVS_Rayfield:Notify({ Title = "Food Store", Content = "Auto Buy Food: OFF", Duration = 2.5, Image = "ban" })
			return
		end
		BRVS_FoodBuyThread = task.spawn(function()
			BRVS_Rayfield:Notify({ Title = "Food Store", Content = "Auto Buy Food: ON", Duration = 2.5, Image = "shopping-cart" })
			while BRVS_FoodBuyEnabled do
				local foods = (BRVS_SelectedFood and #BRVS_SelectedFood > 0) and BRVS_SelectedFood or {}
				local remote = BRVS_GetRemote(BRVS_FOOD_REMOTE_PATH)
				if #foods > 0 and remote and remote:IsA("RemoteEvent") then
					for _, item in ipairs(foods) do
						if not BRVS_FoodBuyEnabled then break end
						if BRVS_HasFoodStock(item) then
							remote:FireServer(item)
							task.wait(0.05)
						end
					end
				end
				task.wait(BRVS_FoodBuyInterval) -- fixed 0.2s tick
			end
		end)
	end,
})

-- =================== TAB: Auto Collect ===================
local BRVS_CollectTab = BRVS_Window:CreateTab("Auto Collect", "package")

BRVS_CollectTab:CreateSection("Auto Collect Pet")
local BRVS_PetDelaySlider = BRVS_CollectTab:CreateSlider({
	Name = "Pet Delay",
	Range = {1, 60},
	Increment = 1,
	Suffix = "sec",
	CurrentValue = BRVS_PetCollectInterval,
	Flag = "PetCollectDelay",
	Callback = function(val)
		BRVS_PetCollectInterval = tonumber(val) or BRVS_PetCollectInterval
	end,
})

-- Pet claimer using PlayerGui.Data.Pets → UIDs
local function BRVS_ClaimMyPetsOnce()
	local pg = BRVS_Player:FindFirstChild("PlayerGui"); if not pg then return end
	local data = pg:FindFirstChild("Data"); if not data then return end
	local petsNode = data:FindFirstChild("Pets"); if not petsNode then return end

	local workspacePets = BRVS_Workspace:FindFirstChild("Pets")
	if not workspacePets then return end

	for _, uidObj in ipairs(petsNode:GetChildren()) do
		local uid = uidObj.Name
		if uidObj:IsA("StringValue") and uidObj.Value and uidObj.Value ~= "" then
			uid = uidObj.Value
		end
		if uid and uid ~= "" then
			local petModel = workspacePets:FindFirstChild(uid) or workspacePets:WaitForChild(uid, 1)
			if petModel and petModel:IsA("Model") then
				local root = petModel:FindFirstChild("RootPart")
				local re = root and root:FindFirstChild("RE")
				if re and re.FireServer then
					re:FireServer("Claim")
					task.wait(0.1)
				end
			end
		end
	end
end

local BRVS_PetToggle = BRVS_CollectTab:CreateToggle({
	Name = "Auto Collect Pet",
	CurrentValue = false,
	Flag = "PetCollectToggle",
	Callback = function(on)
		BRVS_PetCollectEnabled = on
		BRVS_PetCollectThread = nil
		if not BRVS_PetCollectEnabled then return end
		BRVS_PetCollectThread = task.spawn(function()
			while BRVS_PetCollectEnabled do
				BRVS_ClaimMyPetsOnce()
				local t = math.max(0.1, BRVS_PetDelaySlider.CurrentValue or BRVS_PetCollectInterval or 3)
				local elapsed = 0
				while BRVS_PetCollectEnabled and elapsed < t do
					task.wait(0.1); elapsed = elapsed + 0.1
				end
			end
		end)
	end,
})

-- Big Pet (placeholder)
BRVS_CollectTab:CreateSection("Auto Collect Big Pet")
local BRVS_BigPetDelaySlider = BRVS_CollectTab:CreateSlider({
	Name = "Big Pet Delay",
	Range = {1, 120},
	Increment = 1,
	Suffix = "sec",
	CurrentValue = BRVS_BigPetCollectInterval,
	Flag = "BigPetCollectDelay",
	Callback = function(val)
		BRVS_BigPetCollectInterval = tonumber(val) or BRVS_BigPetCollectInterval
	end,
})
local BRVS_BigPetToggle = BRVS_CollectTab:CreateToggle({
	Name = "Auto Collect Big Pet",
	CurrentValue = false,
	Flag = "BigPetCollectToggle",
	Callback = function(on)
		BRVS_BigPetCollectEnabled = on
		BRVS_BigPetCollectThread = nil
		if not BRVS_BigPetCollectEnabled then return end
		BRVS_BigPetCollectThread = task.spawn(function()
			while BRVS_BigPetCollectEnabled do
				local t = math.max(0.1, BRVS_BigPetDelaySlider.CurrentValue or BRVS_BigPetCollectInterval or 5)
				local elapsed = 0
				while BRVS_BigPetCollectEnabled and elapsed < t do
					task.wait(0.1); elapsed = elapsed + 0.1
				end
			end
		end)
	end,
})

-- =================== TAB: Inventory (Paragraph-based) ===================
local BRVS_InvTab = BRVS_Window:CreateTab("Inventory", "box")

-- Paragraph element for Eggs
local BRVS_InvEggPara = BRVS_InvTab:CreateParagraph({
    Title = "Eggs",
    Content = "loading..."
})

-- Connections we manage for live updates
local BRVS_InvEggConns, BRVS_InvEggPerItemConns = {}, {}

local function BRVS_ClearInvEggConns()
    for _, c in ipairs(BRVS_InvEggConns) do pcall(function() c:Disconnect() end) end
    BRVS_InvEggConns = {}
    for inst, list in pairs(BRVS_InvEggPerItemConns) do
        for _, c in ipairs(list) do pcall(function() c:Disconnect() end) end
        BRVS_InvEggPerItemConns[inst] = nil
    end
end

local function BRVS_HumanEggName(tVal)
    local base = tostring(tVal or "Unknown")
    base = base:gsub("Egg$", "")
    if #base > 0 then
        base = base:sub(1,1):upper() .. base:sub(2):lower()
    end
    return base .. " egg"
end

local function BRVS_RebuildEggInventoryText(eggsFolder)
    if not BRVS_InvEggPara then return end
    if not eggsFolder then
        BRVS_InvEggPara:Set({ Title = "Eggs", Content = "(none)" })
        return
    end

    -- Tally by (T, M)
    local counts = {}  -- key: T .. "\0" .. (M or "")
    for _, egg in ipairs(eggsFolder:GetChildren()) do
        local T = egg:GetAttribute("T")
        local M = egg:GetAttribute("M")
        local key = tostring(T or "Unknown") .. "\0" .. tostring(M or "")
        counts[key] = (counts[key] or 0) + 1
    end

    -- Build pretty bullet lines
    local lines = {}
    for key, n in pairs(counts) do
        local T, M = key:match("^(.-)\0(.*)$")
        local name = BRVS_HumanEggName(T)
        local line
        if M and M ~= "" then
            line = string.format("• %s | %s  ×%d", name, M, n)
        else
            line = string.format("• %s  ×%d", name, n)
        end
        table.insert(lines, line)
    end
    table.sort(lines, function(a,b) return a:lower() < b:lower() end)

    local content = ""
    if #lines == 0 then
        content = "(none)"
    else
        -- join with newlines
        for i, ln in ipairs(lines) do
            if i == 1 then
                content = ln
            else
                content = content .. "\n" .. ln
            end
        end
    end

    BRVS_InvEggPara:Set({ Title = "Eggs", Content = content })
end

local function BRVS_BindInventoryEggs()
    BRVS_ClearInvEggConns()

    local pg   = BRVS_Player:WaitForChild("PlayerGui")
    local data = pg:WaitForChild("Data")
    local eggs = data:WaitForChild("Egg") -- array of uid instances with attributes T, optional M

    BRVS_RebuildEggInventoryText(eggs)

    -- React to adds/removes
    table.insert(BRVS_InvEggConns, eggs.ChildAdded:Connect(function(child)
        local list = {}
        table.insert(list, child:GetAttributeChangedSignal("T"):Connect(function()
            BRVS_RebuildEggInventoryText(eggs)
        end))
        table.insert(list, child:GetAttributeChangedSignal("M"):Connect(function()
            BRVS_RebuildEggInventoryText(eggs)
        end))
        BRVS_InvEggPerItemConns[child] = list
        BRVS_RebuildEggInventoryText(eggs)
    end))

    table.insert(BRVS_InvEggConns, eggs.ChildRemoved:Connect(function(child)
        local list = BRVS_InvEggPerItemConns[child]
        if list then
            for _, c in ipairs(list) do pcall(function() c:Disconnect() end) end
        end
        BRVS_InvEggPerItemConns[child] = nil
        BRVS_RebuildEggInventoryText(eggs)
    end))

    -- Hook existing items for attribute changes
    for _, child in ipairs(eggs:GetChildren()) do
        local list = {}
        table.insert(list, child:GetAttributeChangedSignal("T"):Connect(function()
            BRVS_RebuildEggInventoryText(eggs)
        end))
        table.insert(list, child:GetAttributeChangedSignal("M"):Connect(function()
            BRVS_RebuildEggInventoryText(eggs)
        end))
        BRVS_InvEggPerItemConns[child] = list
    end
end

-- call once on init (after window creation)
-- BRVS_BindInventoryEggs()

-- =================== TAB: Utils ===================
local BRVS_UtilsTab = BRVS_Window:CreateTab("Utils", "sliders")

BRVS_UtilsTab:CreateSection("Ultra Low")
local BRVS_UltraLowToggle = BRVS_UtilsTab:CreateToggle({
	Name = "Ultra Low (No Lag + Low Graphics)",
	CurrentValue = false,
	Flag = "UltraLow",
	Callback = function(on)
		if on then
			BRVS_ApplyUltraLow()
		else
			BRVS_RestoreUltraLow()
		end
	end,
})

BRVS_UtilsTab:CreateSection("AFK")
local BRVS_AntiAfkToggle = BRVS_UtilsTab:CreateToggle({
	Name = "Anti AFK (jump)",
	CurrentValue = false,
	Flag = "AntiAFK",
	Callback = function(on)
		BRVS_AntiAfkEnabled = on
		if BRVS_AntiAfkConn then BRVS_AntiAfkConn:Disconnect(); BRVS_AntiAfkConn = nil end
		BRVS_AntiAfkThread = nil
		if not BRVS_AntiAfkEnabled then return end

		BRVS_AntiAfkConn = BRVS_Players.LocalPlayer.Idled:Connect(function()
			BRVS_PerformJump(1)
		end)

		BRVS_AntiAfkThread = task.spawn(function()
			while BRVS_AntiAfkEnabled do
				BRVS_PerformJump(1)
				local t = 45
				local elapsed = 0
				while BRVS_AntiAfkEnabled and elapsed < t do
					task.wait(0.25); elapsed = elapsed + 0.25
				end
			end
		end)
	end,
})

--========================================================
-- Bind island, LIVE stock, inventory, load config
if BRVS_IslandName then
	BRVS_BindIsland(BRVS_IslandName)
else
	BRVS_Rayfield:Notify({ Title = "Egg Tools", Content = "You are not occupying Island_1..Island_6", Duration = 6, Image = "alert-triangle" })
end

BRVS_BindFoodStock()
BRVS_BindInventoryEggs()

-- Load saved UI state
BRVS_Rayfield:LoadConfiguration()

-- Sync state from saved flags (prefixed)
do
	-- Dropdowns
	if BRVS_EggDD and BRVS_EggDD.CurrentOption then BRVS_SelEggNames = BRVS_EggDD.CurrentOption or {} end
	if BRVS_MutDD and BRVS_MutDD.CurrentOption then BRVS_SelMutations = BRVS_MutDD.CurrentOption or {} end
	if BRVS_FoodDD and BRVS_FoodDD.CurrentOption then BRVS_SelectedFood = BRVS_FoodDD.CurrentOption or {} end

	-- Auto Buy Eggs
	if BRVS_AutoBuyToggle and BRVS_AutoBuyToggle.CurrentValue then
		BRVS_AutoBuyEnabled = true
		BRVS_RescanAutoBuy()
	end

	-- Auto Buy Food (fixed tick)
	if BRVS_AutoBuyFoodToggle and BRVS_AutoBuyFoodToggle.CurrentValue and not BRVS_FoodBuyThread then
		BRVS_FoodBuyEnabled = true
		BRVS_FoodBuyThread = task.spawn(function()
			while BRVS_FoodBuyEnabled do
				local foods = (BRVS_SelectedFood and #BRVS_SelectedFood > 0) and BRVS_SelectedFood or {}
				local remote = BRVS_GetRemote(BRVS_FOOD_REMOTE_PATH)
				if #foods > 0 and remote and remote:IsA("RemoteEvent") then
					for _, item in ipairs(foods) do
						if not BRVS_FoodBuyEnabled then break end
						if BRVS_HasFoodStock(item) then
							remote:FireServer(item)
							task.wait(0.05)
						end
					end
				end
				task.wait(BRVS_FoodBuyInterval)
			end
		end)
	end

	-- Auto Collect Pet
	if BRVS_PetDelaySlider and BRVS_PetDelaySlider.CurrentValue then
		BRVS_PetCollectInterval = BRVS_PetDelaySlider.CurrentValue
	end
	if BRVS_PetToggle and BRVS_PetToggle.CurrentValue and not BRVS_PetCollectThread then
		BRVS_PetCollectEnabled = true
		BRVS_PetCollectThread = task.spawn(function()
			while BRVS_PetCollectEnabled do
				BRVS_ClaimMyPetsOnce()
				local t = math.max(0.1, BRVS_PetDelaySlider.CurrentValue or BRVS_PetCollectInterval or 3)
				local elapsed = 0
				while BRVS_PetCollectEnabled and elapsed < t do
					task.wait(0.1); elapsed = elapsed + 0.1
				end
			end
		end)
	end

	-- Auto Collect Big Pet
	if BRVS_BigPetDelaySlider and BRVS_BigPetDelaySlider.CurrentValue then
		BRVS_BigPetCollectInterval = BRVS_BigPetDelaySlider.CurrentValue
	end
	if BRVS_BigPetToggle and BRVS_BigPetToggle.CurrentValue and not BRVS_BigPetCollectThread then
		BRVS_BigPetCollectEnabled = true
		BRVS_BigPetCollectThread = task.spawn(function()
			while BRVS_BigPetCollectEnabled do
				local t = math.max(0.1, BRVS_BigPetDelaySlider.CurrentValue or BRVS_BigPetCollectInterval or 5)
				local elapsed = 0
				while BRVS_BigPetCollectEnabled and elapsed < t do
					task.wait(0.1); elapsed = elapsed + 0.1
				end
			end
		end)
	end

	-- Ultra Low restore
	-- (If you saved the toggle ON last session, consider applying here if needed.)

	-- Anti AFK restore
	if BRVS_AntiAfkToggle and BRVS_AntiAfkToggle.CurrentValue then
		BRVS_AntiAfkEnabled = true
		if BRVS_AntiAfkConn then BRVS_AntiAfkConn:Disconnect(); BRVS_AntiAfkConn = nil end
		BRVS_AntiAfkConn = BRVS_Players.LocalPlayer.Idled:Connect(function()
			BRVS_PerformJump(2)
		end)
		if not BRVS_AntiAfkThread then
			BRVS_AntiAfkThread = task.spawn(function()
				while BRVS_AntiAfkEnabled do
					BRVS_PerformJump(1)
					local t = 45
					local elapsed = 0
					while BRVS_AntiAfkEnabled and elapsed < t do
						task.wait(0.25); elapsed = elapsed + 0.25
					end
				end
			end)
		end
	end

	-- Update label if needed
	if BRVS_IslandLabel and BRVS_IslandName then BRVS_IslandLabel:Set("Island: "..BRVS_IslandName) end
end
